#include elf64_syscalls
#include leak_allocator

macro sizeof(int) ( -> (sizeof(int) := int)) 8 end
macro sizeof(ptr) ( -> (sizeof(ptr) := int)) 8 end

macro neqi (int int -> bool)
  eqi not
end

// Array indexing function
macro get_argv ((offset := int) (argv := ptr) -> ptr)
  sizeof(ptr) mul add read8 unsafe_mk_ptr
end

proc mod (int int -> int)
  over over div mul sub
end

// O(n) - Iterate till null byte
proc str_len ((str := ptr) -> (len := int))
  proc str_len_go ((str := ptr) (len := int) -> (str+1 := ptr) (len+1 := int))
    dup read1 0 neqi if
      1 add
      swap
      1 add
      swap
      str_len_go
    end
  end
  0 swap str_len_go pop
end

macro print_str_len ((str := ptr) (len := int) -> )
 1 sys_write pop
end

macro print_str ((str := ptr) -> )
  dup str_len swap print_str_len
end

proc print_bool (bool -> )
  if "true" else "false" end print_str
end

proc print_uint ((num_to_print := int) -> )
  macro sizeof(print_uint_buf) ( -> (sizeof(print_uint_buf) := int)) 64 end

  sizeof(print_uint_buf) alloc "buf" rename dup rot

  // Set null byte
  0 over sizeof(print_uint_buf) 1 sub add write1 swap

  // Set buffer pointer counting down
  sizeof(print_uint_buf) 2 sub rot rot swap add swap
  proc print_uint_go ((num_to_print := int) (buf := ptr) -> )
    dup
    // Get lowest digit
    10 mod '0' add "digit" rename
    // Write digit to buffer
    rot rot over over write1
    // Offset buffer
    1 sub
    // Divide by 10
    swap drop swap 10 div "num_to_print/10" rename
    dup 0 eqi if
      // No more digits
      drop
      1 add print_str
    else
      print_uint_go
    end
  end
  print_uint_go
  free
end
